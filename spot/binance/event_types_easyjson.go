// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance(in *jlexer.Lexer, out *wsTickerArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(wsTickerArr, 0, 0)
			} else {
				*out = wsTickerArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 wsTicker
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance(out *jwriter.Writer, in wsTickerArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v wsTickerArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsTickerArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsTickerArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsTickerArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance1(in *jlexer.Lexer, out *wsTicker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "bidPrice":
			out.BidPrice = string(in.String())
		case "bidQty":
			out.BidQty = string(in.String())
		case "askPrice":
			out.AskPrice = string(in.String())
		case "askQty":
			out.AskQty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance1(out *jwriter.Writer, in wsTicker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"bidPrice\":"
		out.RawString(prefix)
		out.String(string(in.BidPrice))
	}
	{
		const prefix string = ",\"bidQty\":"
		out.RawString(prefix)
		out.String(string(in.BidQty))
	}
	{
		const prefix string = ",\"askPrice\":"
		out.RawString(prefix)
		out.String(string(in.AskPrice))
	}
	{
		const prefix string = ",\"askQty\":"
		out.RawString(prefix)
		out.String(string(in.AskQty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsTicker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsTicker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsTicker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsTicker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance1(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance2(in *jlexer.Lexer, out *wsSymbolInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "baseAsset":
			out.BaseAsset = string(in.String())
		case "baseAssetPrecision":
			out.BaseAssetPrecision = int(in.Int())
		case "quoteAsset":
			out.QuoteAsset = string(in.String())
		case "quoteAssetPrecision":
			out.QuoteAssetPrecision = int(in.Int())
		case "orderTypes":
			if in.IsNull() {
				in.Skip()
				out.OrderTypes = nil
			} else {
				in.Delim('[')
				if out.OrderTypes == nil {
					if !in.IsDelim(']') {
						out.OrderTypes = make([]string, 0, 4)
					} else {
						out.OrderTypes = []string{}
					}
				} else {
					out.OrderTypes = (out.OrderTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.OrderTypes = append(out.OrderTypes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "icebergAllowed":
			out.IcebergAllowed = bool(in.Bool())
		case "ocoAllowed":
			out.OcoAllowed = bool(in.Bool())
		case "otoAllowed":
			out.OtoAllowed = bool(in.Bool())
		case "quoteOrderQtyMarketAllowed":
			out.QuoteOrderQtyMarketAllowed = bool(in.Bool())
		case "allowTrailingStop":
			out.AllowTrailingStop = bool(in.Bool())
		case "cancelReplaceAllowed":
			out.CancelReplaceAllowed = bool(in.Bool())
		case "amendAllowed":
			out.AmendAllowed = bool(in.Bool())
		case "isSpotTradingAllowed":
			out.IsSpotTradingAllowed = bool(in.Bool())
		case "isMarginTradingAllowed":
			out.IsMarginTradingAllowed = bool(in.Bool())
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]wsFilter, 0, 0)
					} else {
						out.Filters = []wsFilter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v5 wsFilter
					(v5).UnmarshalEasyJSON(in)
					out.Filters = append(out.Filters, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissions":
			if in.IsNull() {
				in.Skip()
				out.Permissions = nil
			} else {
				in.Delim('[')
				if out.Permissions == nil {
					if !in.IsDelim(']') {
						out.Permissions = make([]string, 0, 4)
					} else {
						out.Permissions = []string{}
					}
				} else {
					out.Permissions = (out.Permissions)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Permissions = append(out.Permissions, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permissionSets":
			if in.IsNull() {
				in.Skip()
				out.PermissionSets = nil
			} else {
				in.Delim('[')
				if out.PermissionSets == nil {
					if !in.IsDelim(']') {
						out.PermissionSets = make([][]string, 0, 2)
					} else {
						out.PermissionSets = [][]string{}
					}
				} else {
					out.PermissionSets = (out.PermissionSets)[:0]
				}
				for !in.IsDelim(']') {
					var v7 []string
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]string, 0, 4)
							} else {
								v7 = []string{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 string
							v8 = string(in.String())
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.PermissionSets = append(out.PermissionSets, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance2(out *jwriter.Writer, in wsSymbolInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"baseAsset\":"
		out.RawString(prefix)
		out.String(string(in.BaseAsset))
	}
	{
		const prefix string = ",\"baseAssetPrecision\":"
		out.RawString(prefix)
		out.Int(int(in.BaseAssetPrecision))
	}
	{
		const prefix string = ",\"quoteAsset\":"
		out.RawString(prefix)
		out.String(string(in.QuoteAsset))
	}
	{
		const prefix string = ",\"quoteAssetPrecision\":"
		out.RawString(prefix)
		out.Int(int(in.QuoteAssetPrecision))
	}
	{
		const prefix string = ",\"orderTypes\":"
		out.RawString(prefix)
		if in.OrderTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.OrderTypes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"icebergAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IcebergAllowed))
	}
	{
		const prefix string = ",\"ocoAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.OcoAllowed))
	}
	{
		const prefix string = ",\"otoAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.OtoAllowed))
	}
	{
		const prefix string = ",\"quoteOrderQtyMarketAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.QuoteOrderQtyMarketAllowed))
	}
	{
		const prefix string = ",\"allowTrailingStop\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowTrailingStop))
	}
	{
		const prefix string = ",\"cancelReplaceAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.CancelReplaceAllowed))
	}
	{
		const prefix string = ",\"amendAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.AmendAllowed))
	}
	{
		const prefix string = ",\"isSpotTradingAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSpotTradingAllowed))
	}
	{
		const prefix string = ",\"isMarginTradingAllowed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMarginTradingAllowed))
	}
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Filters {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		if in.Permissions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Permissions {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permissionSets\":"
		out.RawString(prefix)
		if in.PermissionSets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.PermissionSets {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16 {
						if v17 > 0 {
							out.RawByte(',')
						}
						out.String(string(v18))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsSymbolInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsSymbolInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsSymbolInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsSymbolInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance2(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance3(in *jlexer.Lexer, out *wsRateLimitWithCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance3(out *jwriter.Writer, in wsRateLimitWithCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsRateLimitWithCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsRateLimitWithCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsRateLimitWithCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsRateLimitWithCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance3(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance4(in *jlexer.Lexer, out *wsRateLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance4(out *jwriter.Writer, in wsRateLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsRateLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsRateLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsRateLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsRateLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance4(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance5(in *jlexer.Lexer, out *wsOrderTradeUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "S":
			out.Side = string(in.String())
		case "o":
			out.OrderType = string(in.String())
		case "X":
			out.Status = string(in.String())
		case "i":
			out.OrderID = int64(in.Int64())
		case "c":
			out.ClientOrderID = string(in.String())
		case "q":
			out.OrigQty = string(in.String())
		case "p":
			out.Price = string(in.String())
		case "z":
			out.ExecutedQty = string(in.String())
		case "Z":
			out.CummulativeQuote = string(in.String())
		case "t":
			out.TradeID = int64(in.Int64())
		case "L":
			out.LastFilledPrice = string(in.String())
		case "l":
			out.LastFilledQty = string(in.String())
		case "T":
			out.LastFilledTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance5(out *jwriter.Writer, in wsOrderTradeUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.OrigQty))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.ExecutedQty))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.String(string(in.CummulativeQuote))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledQty))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastFilledTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsOrderTradeUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsOrderTradeUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsOrderTradeUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsOrderTradeUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance5(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance6(in *jlexer.Lexer, out *wsListStatusOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.OrderId = int64(in.Int64())
		case "c":
			out.ClientOrderId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance6(out *jwriter.Writer, in wsListStatusOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsListStatusOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsListStatusOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsListStatusOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsListStatusOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance6(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance7(in *jlexer.Lexer, out *wsListStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "g":
			out.OrderListId = int64(in.Int64())
		case "c":
			out.ContingencyType = string(in.String())
		case "l":
			out.ListStatusType = string(in.String())
		case "L":
			out.ListOrderStatus = string(in.String())
		case "r":
			out.ListRejectReason = string(in.String())
		case "C":
			out.ListClientOrderId = string(in.String())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "O":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]wsListStatusOrder, 0, 1)
					} else {
						out.Orders = []wsListStatusOrder{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v19 wsListStatusOrder
					(v19).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance7(out *jwriter.Writer, in wsListStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderListId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ContingencyType))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.ListStatusType))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.ListOrderStatus))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.ListRejectReason))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.ListClientOrderId))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Orders {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsListStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsListStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsListStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsListStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance7(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance8(in *jlexer.Lexer, out *wsFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filterType":
			out.FilterType = string(in.String())
		case "minPrice":
			out.MinPrice = string(in.String())
		case "maxPrice":
			out.MaxPrice = string(in.String())
		case "tickSize":
			out.TickSize = string(in.String())
		case "minQty":
			out.MinQty = string(in.String())
		case "maxQty":
			out.MaxQty = string(in.String())
		case "stepSize":
			out.StepSize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance8(out *jwriter.Writer, in wsFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filterType\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilterType))
	}
	if in.MinPrice != "" {
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix)
		out.String(string(in.MinPrice))
	}
	if in.MaxPrice != "" {
		const prefix string = ",\"maxPrice\":"
		out.RawString(prefix)
		out.String(string(in.MaxPrice))
	}
	if in.TickSize != "" {
		const prefix string = ",\"tickSize\":"
		out.RawString(prefix)
		out.String(string(in.TickSize))
	}
	if in.MinQty != "" {
		const prefix string = ",\"minQty\":"
		out.RawString(prefix)
		out.String(string(in.MinQty))
	}
	if in.MaxQty != "" {
		const prefix string = ",\"maxQty\":"
		out.RawString(prefix)
		out.String(string(in.MaxQty))
	}
	if in.StepSize != "" {
		const prefix string = ",\"stepSize\":"
		out.RawString(prefix)
		out.String(string(in.StepSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance8(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance9(in *jlexer.Lexer, out *wsExternalLockUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "a":
			out.Asset = string(in.String())
		case "d":
			out.BalanceDelta = string(in.String())
		case "T":
			out.ClearTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance9(out *jwriter.Writer, in wsExternalLockUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.BalanceDelta))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClearTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsExternalLockUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsExternalLockUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsExternalLockUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsExternalLockUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance9(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance10(in *jlexer.Lexer, out *wsExchangeInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timezone":
			out.Timezone = string(in.String())
		case "serverTime":
			out.ServerTime = int64(in.Int64())
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]wsRateLimit, 0, 1)
					} else {
						out.RateLimits = []wsRateLimit{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v22 wsRateLimit
					(v22).UnmarshalEasyJSON(in)
					out.RateLimits = append(out.RateLimits, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]wsSymbolInfo, 0, 0)
					} else {
						out.Symbols = []wsSymbolInfo{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v23 wsSymbolInfo
					(v23).UnmarshalEasyJSON(in)
					out.Symbols = append(out.Symbols, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance10(out *jwriter.Writer, in wsExchangeInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timezone))
	}
	{
		const prefix string = ",\"serverTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ServerTime))
	}
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix)
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.RateLimits {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Symbols {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsExchangeInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsExchangeInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsExchangeInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsExchangeInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance10(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance11(in *jlexer.Lexer, out *wsEventStreamTerminated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance11(out *jwriter.Writer, in wsEventStreamTerminated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsEventStreamTerminated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsEventStreamTerminated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsEventStreamTerminated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsEventStreamTerminated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance11(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance12(in *jlexer.Lexer, out *wsBalanceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "a":
			out.Asset = string(in.String())
		case "d":
			out.BalanceDelta = string(in.String())
		case "T":
			out.ClearTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance12(out *jwriter.Writer, in wsBalanceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.BalanceDelta))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClearTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsBalanceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsBalanceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsBalanceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsBalanceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance12(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance13(in *jlexer.Lexer, out *wsAccountUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "B":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]struct {
							Asset  string `json:"a"`
							Free   string `json:"f"`
							Locked string `json:"l"`
						}, 0, 1)
					} else {
						out.Balances = []struct {
							Asset  string `json:"a"`
							Free   string `json:"f"`
							Locked string `json:"l"`
						}{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v28 struct {
						Asset  string `json:"a"`
						Free   string `json:"f"`
						Locked string `json:"l"`
					}
					easyjsonDc809a28Decode(in, &v28)
					out.Balances = append(out.Balances, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance13(out *jwriter.Writer, in wsAccountUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.Balances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Balances {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28Encode(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsAccountUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsAccountUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsAccountUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsAccountUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance13(l, v)
}
func easyjsonDc809a28Decode(in *jlexer.Lexer, out *struct {
	Asset  string `json:"a"`
	Free   string `json:"f"`
	Locked string `json:"l"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "f":
			out.Free = string(in.String())
		case "l":
			out.Locked = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28Encode(out *jwriter.Writer, in struct {
	Asset  string `json:"a"`
	Free   string `json:"f"`
	Locked string `json:"l"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.Free))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Locked))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance14(in *jlexer.Lexer, out *WsRateLimitEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance14(out *jwriter.Writer, in WsRateLimitEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsRateLimitEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsRateLimitEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsRateLimitEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsRateLimitEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance14(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance15(in *jlexer.Lexer, out *WsOrderResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "orderListId":
			out.OrderListID = int64(in.Int64())
		case "clientOrderId":
			out.ClientOrderID = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "price":
			out.Price = string(in.String())
		case "origQty":
			out.OrigQty = string(in.String())
		case "executedQty":
			out.ExecutedQty = string(in.String())
		case "origQuoteOrderQty":
			out.OrigQuoteOrderQty = string(in.String())
		case "cummulativeQuoteQty":
			out.CummulativeQuoteQty = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "workingTime":
			out.WorkingTime = int64(in.Int64())
		case "fills":
			if in.IsNull() {
				in.Skip()
				out.Fills = nil
			} else {
				in.Delim('[')
				if out.Fills == nil {
					if !in.IsDelim(']') {
						out.Fills = make([]WsOrderFill, 0, 0)
					} else {
						out.Fills = []WsOrderFill{}
					}
				} else {
					out.Fills = (out.Fills)[:0]
				}
				for !in.IsDelim(']') {
					var v31 WsOrderFill
					(v31).UnmarshalEasyJSON(in)
					out.Fills = append(out.Fills, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance15(out *jwriter.Writer, in WsOrderResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"orderListId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderListID))
	}
	{
		const prefix string = ",\"clientOrderId\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"transactTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactTime))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"origQty\":"
		out.RawString(prefix)
		out.String(string(in.OrigQty))
	}
	{
		const prefix string = ",\"executedQty\":"
		out.RawString(prefix)
		out.String(string(in.ExecutedQty))
	}
	{
		const prefix string = ",\"origQuoteOrderQty\":"
		out.RawString(prefix)
		out.String(string(in.OrigQuoteOrderQty))
	}
	{
		const prefix string = ",\"cummulativeQuoteQty\":"
		out.RawString(prefix)
		out.String(string(in.CummulativeQuoteQty))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"workingTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.WorkingTime))
	}
	{
		const prefix string = ",\"fills\":"
		out.RawString(prefix)
		if in.Fills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Fills {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance15(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance16(in *jlexer.Lexer, out *WsOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]WsRateLimitEntry, 0, 1)
					} else {
						out.RateLimits = []WsRateLimitEntry{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v34 WsRateLimitEntry
					(v34).UnmarshalEasyJSON(in)
					out.RateLimits = append(out.RateLimits, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance16(out *jwriter.Writer, in WsOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix)
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.RateLimits {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance16(l, v)
}
func easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance17(in *jlexer.Lexer, out *WsOrderFill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "commission":
			out.Commission = string(in.String())
		case "commissionAsset":
			out.CommissionAsset = string(in.String())
		case "tradeId":
			out.TradeID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance17(out *jwriter.Writer, in WsOrderFill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"commissionAsset\":"
		out.RawString(prefix)
		out.String(string(in.CommissionAsset))
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderFill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderFill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGitlabComLjm2yaFlashscalperExchangeBinance17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderFill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderFill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGitlabComLjm2yaFlashscalperExchangeBinance17(l, v)
}
