// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package binance

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance(in *jlexer.Lexer, out *wsTickerStream) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "u":
			out.UpdateID = int64(in.Int64())
		case "E":
			out.EventTime = int64(in.Int64())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "b":
			out.BestBidPrice = string(in.String())
		case "B":
			out.BestBidQty = string(in.String())
		case "a":
			out.BestAskPrice = string(in.String())
		case "A":
			out.BestAskQty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance(out *jwriter.Writer, in wsTickerStream) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateID))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		out.String(string(in.BestBidPrice))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		out.String(string(in.BestBidQty))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.BestAskPrice))
	}
	{
		const prefix string = ",\"A\":"
		out.RawString(prefix)
		out.String(string(in.BestAskQty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsTickerStream) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsTickerStream) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsTickerStream) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsTickerStream) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance1(in *jlexer.Lexer, out *wsTickerArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(wsTickerArr, 0, 0)
			} else {
				*out = wsTickerArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 wsTicker
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance1(out *jwriter.Writer, in wsTickerArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v wsTickerArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsTickerArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsTickerArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsTickerArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance1(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance2(in *jlexer.Lexer, out *wsTicker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "bidPrice":
			out.BidPrice = string(in.String())
		case "bidQty":
			out.BidQty = string(in.String())
		case "askPrice":
			out.AskPrice = string(in.String())
		case "askQty":
			out.AskQty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance2(out *jwriter.Writer, in wsTicker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"bidPrice\":"
		out.RawString(prefix)
		out.String(string(in.BidPrice))
	}
	{
		const prefix string = ",\"bidQty\":"
		out.RawString(prefix)
		out.String(string(in.BidQty))
	}
	{
		const prefix string = ",\"askPrice\":"
		out.RawString(prefix)
		out.String(string(in.AskPrice))
	}
	{
		const prefix string = ",\"askQty\":"
		out.RawString(prefix)
		out.String(string(in.AskQty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsTicker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsTicker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsTicker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsTicker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance2(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance3(in *jlexer.Lexer, out *wsSymbolInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "baseAsset":
			out.BaseAsset = string(in.String())
		case "quoteAsset":
			out.QuoteAsset = string(in.String())
		case "baseAssetPrecision":
			out.BaseAssetPrecision = int(in.Int())
		case "quotePrecision":
			out.QuotePrecision = int(in.Int())
		case "pricePrecision":
			out.PricePrecision = int(in.Int())
		case "quantityPrecision":
			out.QuantityPrecision = int(in.Int())
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]wsFilter, 0, 0)
					} else {
						out.Filters = []wsFilter{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v4 wsFilter
					(v4).UnmarshalEasyJSON(in)
					out.Filters = append(out.Filters, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance3(out *jwriter.Writer, in wsSymbolInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"baseAsset\":"
		out.RawString(prefix)
		out.String(string(in.BaseAsset))
	}
	{
		const prefix string = ",\"quoteAsset\":"
		out.RawString(prefix)
		out.String(string(in.QuoteAsset))
	}
	{
		const prefix string = ",\"baseAssetPrecision\":"
		out.RawString(prefix)
		out.Int(int(in.BaseAssetPrecision))
	}
	{
		const prefix string = ",\"quotePrecision\":"
		out.RawString(prefix)
		out.Int(int(in.QuotePrecision))
	}
	{
		const prefix string = ",\"pricePrecision\":"
		out.RawString(prefix)
		out.Int(int(in.PricePrecision))
	}
	{
		const prefix string = ",\"quantityPrecision\":"
		out.RawString(prefix)
		out.Int(int(in.QuantityPrecision))
	}
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Filters {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsSymbolInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsSymbolInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsSymbolInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsSymbolInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance3(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance4(in *jlexer.Lexer, out *wsSubscribeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				in.Delim('[')
				if out.Params == nil {
					if !in.IsDelim(']') {
						out.Params = make([]string, 0, 4)
					} else {
						out.Params = []string{}
					}
				} else {
					out.Params = (out.Params)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Params = append(out.Params, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance4(out *jwriter.Writer, in wsSubscribeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Params {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsSubscribeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsSubscribeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsSubscribeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsSubscribeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance4(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance5(in *jlexer.Lexer, out *wsRateLimitWithCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance5(out *jwriter.Writer, in wsRateLimitWithCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsRateLimitWithCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsRateLimitWithCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsRateLimitWithCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsRateLimitWithCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance5(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance6(in *jlexer.Lexer, out *wsRateLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance6(out *jwriter.Writer, in wsRateLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix[1:])
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix)
		out.String(string(in.RateLimitType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsRateLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsRateLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsRateLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsRateLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance6(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance7(in *jlexer.Lexer, out *wsOrderTradeUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "S":
			out.Side = string(in.String())
		case "o":
			out.OrderType = string(in.String())
		case "X":
			out.Status = string(in.String())
		case "i":
			out.OrderID = int64(in.Int64())
		case "c":
			out.ClientOrderID = string(in.String())
		case "q":
			out.OrigQty = string(in.String())
		case "p":
			out.Price = string(in.String())
		case "z":
			out.ExecutedQty = string(in.String())
		case "Z":
			out.CummulativeQuote = string(in.String())
		case "t":
			out.TradeID = int64(in.Int64())
		case "L":
			out.LastFilledPrice = string(in.String())
		case "l":
			out.LastFilledQty = string(in.String())
		case "T":
			out.LastFilledTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance7(out *jwriter.Writer, in wsOrderTradeUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"S\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"X\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"q\":"
		out.RawString(prefix)
		out.String(string(in.OrigQty))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.String(string(in.ExecutedQty))
	}
	{
		const prefix string = ",\"Z\":"
		out.RawString(prefix)
		out.String(string(in.CummulativeQuote))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledPrice))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.LastFilledQty))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastFilledTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsOrderTradeUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsOrderTradeUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsOrderTradeUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsOrderTradeUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance7(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance8(in *jlexer.Lexer, out *wsListStatusOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "i":
			out.OrderId = int64(in.Int64())
		case "c":
			out.ClientOrderId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance8(out *jwriter.Writer, in wsListStatusOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsListStatusOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsListStatusOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsListStatusOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsListStatusOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance8(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance9(in *jlexer.Lexer, out *wsListStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "s":
			out.Symbol = string(in.String())
		case "g":
			out.OrderListId = int64(in.Int64())
		case "c":
			out.ContingencyType = string(in.String())
		case "l":
			out.ListStatusType = string(in.String())
		case "L":
			out.ListOrderStatus = string(in.String())
		case "r":
			out.ListRejectReason = string(in.String())
		case "C":
			out.ListClientOrderId = string(in.String())
		case "T":
			out.TransactionTime = int64(in.Int64())
		case "O":
			if in.IsNull() {
				in.Skip()
				out.Orders = nil
			} else {
				in.Delim('[')
				if out.Orders == nil {
					if !in.IsDelim(']') {
						out.Orders = make([]wsListStatusOrder, 0, 1)
					} else {
						out.Orders = []wsListStatusOrder{}
					}
				} else {
					out.Orders = (out.Orders)[:0]
				}
				for !in.IsDelim(']') {
					var v10 wsListStatusOrder
					(v10).UnmarshalEasyJSON(in)
					out.Orders = append(out.Orders, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance9(out *jwriter.Writer, in wsListStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderListId))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.String(string(in.ContingencyType))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.ListStatusType))
	}
	{
		const prefix string = ",\"L\":"
		out.RawString(prefix)
		out.String(string(in.ListOrderStatus))
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.String(string(in.ListRejectReason))
	}
	{
		const prefix string = ",\"C\":"
		out.RawString(prefix)
		out.String(string(in.ListClientOrderId))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactionTime))
	}
	{
		const prefix string = ",\"O\":"
		out.RawString(prefix)
		if in.Orders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Orders {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsListStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsListStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsListStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsListStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance9(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance10(in *jlexer.Lexer, out *wsFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filterType":
			out.FilterType = string(in.String())
		case "minPrice":
			out.MinPrice = string(in.String())
		case "maxPrice":
			out.MaxPrice = string(in.String())
		case "tickSize":
			out.TickSize = string(in.String())
		case "minQty":
			out.MinQty = string(in.String())
		case "maxQty":
			out.MaxQty = string(in.String())
		case "stepSize":
			out.StepSize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance10(out *jwriter.Writer, in wsFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filterType\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilterType))
	}
	if in.MinPrice != "" {
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix)
		out.String(string(in.MinPrice))
	}
	if in.MaxPrice != "" {
		const prefix string = ",\"maxPrice\":"
		out.RawString(prefix)
		out.String(string(in.MaxPrice))
	}
	if in.TickSize != "" {
		const prefix string = ",\"tickSize\":"
		out.RawString(prefix)
		out.String(string(in.TickSize))
	}
	if in.MinQty != "" {
		const prefix string = ",\"minQty\":"
		out.RawString(prefix)
		out.String(string(in.MinQty))
	}
	if in.MaxQty != "" {
		const prefix string = ",\"maxQty\":"
		out.RawString(prefix)
		out.String(string(in.MaxQty))
	}
	if in.StepSize != "" {
		const prefix string = ",\"stepSize\":"
		out.RawString(prefix)
		out.String(string(in.StepSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance10(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance11(in *jlexer.Lexer, out *wsExternalLockUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "a":
			out.Asset = string(in.String())
		case "d":
			out.BalanceDelta = string(in.String())
		case "T":
			out.ClearTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance11(out *jwriter.Writer, in wsExternalLockUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.BalanceDelta))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClearTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsExternalLockUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsExternalLockUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsExternalLockUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsExternalLockUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance11(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance12(in *jlexer.Lexer, out *wsExchangeInfoResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]wsRateLimit, 0, 1)
					} else {
						out.RateLimits = []wsRateLimit{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v13 wsRateLimit
					(v13).UnmarshalEasyJSON(in)
					out.RateLimits = append(out.RateLimits, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]wsSymbolInfo, 0, 0)
					} else {
						out.Symbols = []wsSymbolInfo{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v14 wsSymbolInfo
					(v14).UnmarshalEasyJSON(in)
					out.Symbols = append(out.Symbols, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance12(out *jwriter.Writer, in wsExchangeInfoResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix[1:])
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.RateLimits {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Symbols {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsExchangeInfoResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsExchangeInfoResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsExchangeInfoResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsExchangeInfoResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance12(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance13(in *jlexer.Lexer, out *wsEventStreamTerminated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance13(out *jwriter.Writer, in wsEventStreamTerminated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsEventStreamTerminated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsEventStreamTerminated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsEventStreamTerminated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsEventStreamTerminated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance13(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance14(in *jlexer.Lexer, out *wsBalanceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "a":
			out.Asset = string(in.String())
		case "d":
			out.BalanceDelta = string(in.String())
		case "T":
			out.ClearTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance14(out *jwriter.Writer, in wsBalanceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"d\":"
		out.RawString(prefix)
		out.String(string(in.BalanceDelta))
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClearTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsBalanceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsBalanceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsBalanceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsBalanceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance14(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance15(in *jlexer.Lexer, out *wsAccountUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "e":
			out.EventType = string(in.String())
		case "E":
			out.EventTime = int64(in.Int64())
		case "B":
			if in.IsNull() {
				in.Skip()
				out.Balances = nil
			} else {
				in.Delim('[')
				if out.Balances == nil {
					if !in.IsDelim(']') {
						out.Balances = make([]struct {
							Asset  string `json:"a"`
							Free   string `json:"f"`
							Locked string `json:"l"`
						}, 0, 1)
					} else {
						out.Balances = []struct {
							Asset  string `json:"a"`
							Free   string `json:"f"`
							Locked string `json:"l"`
						}{}
					}
				} else {
					out.Balances = (out.Balances)[:0]
				}
				for !in.IsDelim(']') {
					var v19 struct {
						Asset  string `json:"a"`
						Free   string `json:"f"`
						Locked string `json:"l"`
					}
					easyjsonDc809a28Decode(in, &v19)
					out.Balances = append(out.Balances, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance15(out *jwriter.Writer, in wsAccountUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"E\":"
		out.RawString(prefix)
		out.Int64(int64(in.EventTime))
	}
	{
		const prefix string = ",\"B\":"
		out.RawString(prefix)
		if in.Balances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Balances {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28Encode(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsAccountUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsAccountUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsAccountUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsAccountUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance15(l, v)
}
func easyjsonDc809a28Decode(in *jlexer.Lexer, out *struct {
	Asset  string `json:"a"`
	Free   string `json:"f"`
	Locked string `json:"l"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a":
			out.Asset = string(in.String())
		case "f":
			out.Free = string(in.String())
		case "l":
			out.Locked = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28Encode(out *jwriter.Writer, in struct {
	Asset  string `json:"a"`
	Free   string `json:"f"`
	Locked string `json:"l"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"f\":"
		out.RawString(prefix)
		out.String(string(in.Free))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.String(string(in.Locked))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance16(in *jlexer.Lexer, out *wsAccountPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "positionSide":
			out.PositionSide = string(in.String())
		case "positionAmt":
			out.PositionAmt = string(in.String())
		case "unrealizedProfit":
			out.UnrealizedProfit = string(in.String())
		case "isolatedMargin":
			out.IsolatedMargin = string(in.String())
		case "notional":
			out.Notional = string(in.String())
		case "isolatedWallet":
			out.IsolatedWallet = string(in.String())
		case "initialMargin":
			out.InitialMargin = string(in.String())
		case "maintMargin":
			out.MaintMargin = string(in.String())
		case "updateTime":
			out.UpdateTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance16(out *jwriter.Writer, in wsAccountPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"positionSide\":"
		out.RawString(prefix)
		out.String(string(in.PositionSide))
	}
	{
		const prefix string = ",\"positionAmt\":"
		out.RawString(prefix)
		out.String(string(in.PositionAmt))
	}
	{
		const prefix string = ",\"unrealizedProfit\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedProfit))
	}
	{
		const prefix string = ",\"isolatedMargin\":"
		out.RawString(prefix)
		out.String(string(in.IsolatedMargin))
	}
	{
		const prefix string = ",\"notional\":"
		out.RawString(prefix)
		out.String(string(in.Notional))
	}
	{
		const prefix string = ",\"isolatedWallet\":"
		out.RawString(prefix)
		out.String(string(in.IsolatedWallet))
	}
	{
		const prefix string = ",\"initialMargin\":"
		out.RawString(prefix)
		out.String(string(in.InitialMargin))
	}
	{
		const prefix string = ",\"maintMargin\":"
		out.RawString(prefix)
		out.String(string(in.MaintMargin))
	}
	{
		const prefix string = ",\"updateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsAccountPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsAccountPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsAccountPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsAccountPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance16(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance17(in *jlexer.Lexer, out *wsAccountInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalInitialMargin":
			out.TotalInitialMargin = string(in.String())
		case "totalMaintMargin":
			out.TotalMaintMargin = string(in.String())
		case "totalWalletBalance":
			out.TotalWalletBalance = string(in.String())
		case "totalUnrealizedProfit":
			out.TotalUnrealizedProfit = string(in.String())
		case "totalMarginBalance":
			out.TotalMarginBalance = string(in.String())
		case "totalPositionInitialMargin":
			out.TotalPositionInitialMargin = string(in.String())
		case "totalOpenOrderInitialMargin":
			out.TotalOpenOrderInitialMargin = string(in.String())
		case "totalCrossWalletBalance":
			out.TotalCrossWalletBalance = string(in.String())
		case "totalCrossUnPnl":
			out.TotalCrossUnPnl = string(in.String())
		case "availableBalance":
			out.AvailableBalance = string(in.String())
		case "maxWithdrawAmount":
			out.MaxWithdrawAmount = string(in.String())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]wsAccountAsset, 0, 0)
					} else {
						out.Assets = []wsAccountAsset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v22 wsAccountAsset
					(v22).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]wsAccountPosition, 0, 0)
					} else {
						out.Positions = []wsAccountPosition{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v23 wsAccountPosition
					(v23).UnmarshalEasyJSON(in)
					out.Positions = append(out.Positions, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance17(out *jwriter.Writer, in wsAccountInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalInitialMargin\":"
		out.RawString(prefix[1:])
		out.String(string(in.TotalInitialMargin))
	}
	{
		const prefix string = ",\"totalMaintMargin\":"
		out.RawString(prefix)
		out.String(string(in.TotalMaintMargin))
	}
	{
		const prefix string = ",\"totalWalletBalance\":"
		out.RawString(prefix)
		out.String(string(in.TotalWalletBalance))
	}
	{
		const prefix string = ",\"totalUnrealizedProfit\":"
		out.RawString(prefix)
		out.String(string(in.TotalUnrealizedProfit))
	}
	{
		const prefix string = ",\"totalMarginBalance\":"
		out.RawString(prefix)
		out.String(string(in.TotalMarginBalance))
	}
	{
		const prefix string = ",\"totalPositionInitialMargin\":"
		out.RawString(prefix)
		out.String(string(in.TotalPositionInitialMargin))
	}
	{
		const prefix string = ",\"totalOpenOrderInitialMargin\":"
		out.RawString(prefix)
		out.String(string(in.TotalOpenOrderInitialMargin))
	}
	{
		const prefix string = ",\"totalCrossWalletBalance\":"
		out.RawString(prefix)
		out.String(string(in.TotalCrossWalletBalance))
	}
	{
		const prefix string = ",\"totalCrossUnPnl\":"
		out.RawString(prefix)
		out.String(string(in.TotalCrossUnPnl))
	}
	{
		const prefix string = ",\"availableBalance\":"
		out.RawString(prefix)
		out.String(string(in.AvailableBalance))
	}
	{
		const prefix string = ",\"maxWithdrawAmount\":"
		out.RawString(prefix)
		out.String(string(in.MaxWithdrawAmount))
	}
	{
		const prefix string = ",\"assets\":"
		out.RawString(prefix)
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Assets {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"positions\":"
		out.RawString(prefix)
		if in.Positions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Positions {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsAccountInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsAccountInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsAccountInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsAccountInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance17(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance18(in *jlexer.Lexer, out *wsAccountAsset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset":
			out.Asset = string(in.String())
		case "walletBalance":
			out.WalletBalance = string(in.String())
		case "unrealizedProfit":
			out.UnrealizedProfit = string(in.String())
		case "marginBalance":
			out.MarginBalance = string(in.String())
		case "maintMargin":
			out.MaintMargin = string(in.String())
		case "initialMargin":
			out.InitialMargin = string(in.String())
		case "positionInitialMargin":
			out.PositionInitialMargin = string(in.String())
		case "openOrderInitialMargin":
			out.OpenOrderInitialMargin = string(in.String())
		case "crossWalletBalance":
			out.CrossWalletBalance = string(in.String())
		case "crossUnPnl":
			out.CrossUnPnl = string(in.String())
		case "availableBalance":
			out.AvailableBalance = string(in.String())
		case "maxWithdrawAmount":
			out.MaxWithdrawAmount = string(in.String())
		case "updateTime":
			out.UpdateTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance18(out *jwriter.Writer, in wsAccountAsset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asset\":"
		out.RawString(prefix[1:])
		out.String(string(in.Asset))
	}
	{
		const prefix string = ",\"walletBalance\":"
		out.RawString(prefix)
		out.String(string(in.WalletBalance))
	}
	{
		const prefix string = ",\"unrealizedProfit\":"
		out.RawString(prefix)
		out.String(string(in.UnrealizedProfit))
	}
	{
		const prefix string = ",\"marginBalance\":"
		out.RawString(prefix)
		out.String(string(in.MarginBalance))
	}
	{
		const prefix string = ",\"maintMargin\":"
		out.RawString(prefix)
		out.String(string(in.MaintMargin))
	}
	{
		const prefix string = ",\"initialMargin\":"
		out.RawString(prefix)
		out.String(string(in.InitialMargin))
	}
	{
		const prefix string = ",\"positionInitialMargin\":"
		out.RawString(prefix)
		out.String(string(in.PositionInitialMargin))
	}
	{
		const prefix string = ",\"openOrderInitialMargin\":"
		out.RawString(prefix)
		out.String(string(in.OpenOrderInitialMargin))
	}
	{
		const prefix string = ",\"crossWalletBalance\":"
		out.RawString(prefix)
		out.String(string(in.CrossWalletBalance))
	}
	{
		const prefix string = ",\"crossUnPnl\":"
		out.RawString(prefix)
		out.String(string(in.CrossUnPnl))
	}
	{
		const prefix string = ",\"availableBalance\":"
		out.RawString(prefix)
		out.String(string(in.AvailableBalance))
	}
	{
		const prefix string = ",\"maxWithdrawAmount\":"
		out.RawString(prefix)
		out.String(string(in.MaxWithdrawAmount))
	}
	{
		const prefix string = ",\"updateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wsAccountAsset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wsAccountAsset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wsAccountAsset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wsAccountAsset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance18(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance19(in *jlexer.Lexer, out *WsfapiExchangeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]struct {
							RateLimitType string `json:"rateLimitType"`
							Interval      string `json:"interval"`
							IntervalNum   int    `json:"intervalNum"`
							Limit         int    `json:"limit"`
						}, 0, 1)
					} else {
						out.RateLimits = []struct {
							RateLimitType string `json:"rateLimitType"`
							Interval      string `json:"interval"`
							IntervalNum   int    `json:"intervalNum"`
							Limit         int    `json:"limit"`
						}{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v28 struct {
						RateLimitType string `json:"rateLimitType"`
						Interval      string `json:"interval"`
						IntervalNum   int    `json:"intervalNum"`
						Limit         int    `json:"limit"`
					}
					easyjsonDc809a28Decode1(in, &v28)
					out.RateLimits = append(out.RateLimits, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]struct {
							Symbol            string `json:"symbol"`
							Status            string `json:"status"`
							BaseAsset         string `json:"baseAsset"`
							QuoteAsset        string `json:"quoteAsset"`
							PricePrecision    int    `json:"pricePrecision"`
							QuantityPrecision int    `json:"quantityPrecision"`
							Filters           []struct {
								FilterType string `json:"filterType"`
								MinPrice   string `json:"minPrice,omitempty"`
								MaxPrice   string `json:"maxPrice,omitempty"`
								TickSize   string `json:"tickSize,omitempty"`
								MinQty     string `json:"minQty,omitempty"`
								MaxQty     string `json:"maxQty,omitempty"`
								StepSize   string `json:"stepSize,omitempty"`
							} `json:"filters"`
							OrderType []string `json:"OrderType"`
						}, 0, 0)
					} else {
						out.Symbols = []struct {
							Symbol            string `json:"symbol"`
							Status            string `json:"status"`
							BaseAsset         string `json:"baseAsset"`
							QuoteAsset        string `json:"quoteAsset"`
							PricePrecision    int    `json:"pricePrecision"`
							QuantityPrecision int    `json:"quantityPrecision"`
							Filters           []struct {
								FilterType string `json:"filterType"`
								MinPrice   string `json:"minPrice,omitempty"`
								MaxPrice   string `json:"maxPrice,omitempty"`
								TickSize   string `json:"tickSize,omitempty"`
								MinQty     string `json:"minQty,omitempty"`
								MaxQty     string `json:"maxQty,omitempty"`
								StepSize   string `json:"stepSize,omitempty"`
							} `json:"filters"`
							OrderType []string `json:"OrderType"`
						}{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v29 struct {
						Symbol            string `json:"symbol"`
						Status            string `json:"status"`
						BaseAsset         string `json:"baseAsset"`
						QuoteAsset        string `json:"quoteAsset"`
						PricePrecision    int    `json:"pricePrecision"`
						QuantityPrecision int    `json:"quantityPrecision"`
						Filters           []struct {
							FilterType string `json:"filterType"`
							MinPrice   string `json:"minPrice,omitempty"`
							MaxPrice   string `json:"maxPrice,omitempty"`
							TickSize   string `json:"tickSize,omitempty"`
							MinQty     string `json:"minQty,omitempty"`
							MaxQty     string `json:"maxQty,omitempty"`
							StepSize   string `json:"stepSize,omitempty"`
						} `json:"filters"`
						OrderType []string `json:"OrderType"`
					}
					easyjsonDc809a28Decode2(in, &v29)
					out.Symbols = append(out.Symbols, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance19(out *jwriter.Writer, in WsfapiExchangeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix[1:])
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.RateLimits {
				if v30 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28Encode1(out, v31)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Symbols {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28Encode2(out, v33)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsfapiExchangeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsfapiExchangeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsfapiExchangeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsfapiExchangeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance19(l, v)
}
func easyjsonDc809a28Decode2(in *jlexer.Lexer, out *struct {
	Symbol            string `json:"symbol"`
	Status            string `json:"status"`
	BaseAsset         string `json:"baseAsset"`
	QuoteAsset        string `json:"quoteAsset"`
	PricePrecision    int    `json:"pricePrecision"`
	QuantityPrecision int    `json:"quantityPrecision"`
	Filters           []struct {
		FilterType string `json:"filterType"`
		MinPrice   string `json:"minPrice,omitempty"`
		MaxPrice   string `json:"maxPrice,omitempty"`
		TickSize   string `json:"tickSize,omitempty"`
		MinQty     string `json:"minQty,omitempty"`
		MaxQty     string `json:"maxQty,omitempty"`
		StepSize   string `json:"stepSize,omitempty"`
	} `json:"filters"`
	OrderType []string `json:"OrderType"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "baseAsset":
			out.BaseAsset = string(in.String())
		case "quoteAsset":
			out.QuoteAsset = string(in.String())
		case "pricePrecision":
			out.PricePrecision = int(in.Int())
		case "quantityPrecision":
			out.QuantityPrecision = int(in.Int())
		case "filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if out.Filters == nil {
					if !in.IsDelim(']') {
						out.Filters = make([]struct {
							FilterType string `json:"filterType"`
							MinPrice   string `json:"minPrice,omitempty"`
							MaxPrice   string `json:"maxPrice,omitempty"`
							TickSize   string `json:"tickSize,omitempty"`
							MinQty     string `json:"minQty,omitempty"`
							MaxQty     string `json:"maxQty,omitempty"`
							StepSize   string `json:"stepSize,omitempty"`
						}, 0, 0)
					} else {
						out.Filters = []struct {
							FilterType string `json:"filterType"`
							MinPrice   string `json:"minPrice,omitempty"`
							MaxPrice   string `json:"maxPrice,omitempty"`
							TickSize   string `json:"tickSize,omitempty"`
							MinQty     string `json:"minQty,omitempty"`
							MaxQty     string `json:"maxQty,omitempty"`
							StepSize   string `json:"stepSize,omitempty"`
						}{}
					}
				} else {
					out.Filters = (out.Filters)[:0]
				}
				for !in.IsDelim(']') {
					var v34 struct {
						FilterType string `json:"filterType"`
						MinPrice   string `json:"minPrice,omitempty"`
						MaxPrice   string `json:"maxPrice,omitempty"`
						TickSize   string `json:"tickSize,omitempty"`
						MinQty     string `json:"minQty,omitempty"`
						MaxQty     string `json:"maxQty,omitempty"`
						StepSize   string `json:"stepSize,omitempty"`
					}
					easyjsonDc809a28Decode3(in, &v34)
					out.Filters = append(out.Filters, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OrderType":
			if in.IsNull() {
				in.Skip()
				out.OrderType = nil
			} else {
				in.Delim('[')
				if out.OrderType == nil {
					if !in.IsDelim(']') {
						out.OrderType = make([]string, 0, 4)
					} else {
						out.OrderType = []string{}
					}
				} else {
					out.OrderType = (out.OrderType)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.OrderType = append(out.OrderType, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28Encode2(out *jwriter.Writer, in struct {
	Symbol            string `json:"symbol"`
	Status            string `json:"status"`
	BaseAsset         string `json:"baseAsset"`
	QuoteAsset        string `json:"quoteAsset"`
	PricePrecision    int    `json:"pricePrecision"`
	QuantityPrecision int    `json:"quantityPrecision"`
	Filters           []struct {
		FilterType string `json:"filterType"`
		MinPrice   string `json:"minPrice,omitempty"`
		MaxPrice   string `json:"maxPrice,omitempty"`
		TickSize   string `json:"tickSize,omitempty"`
		MinQty     string `json:"minQty,omitempty"`
		MaxQty     string `json:"maxQty,omitempty"`
		StepSize   string `json:"stepSize,omitempty"`
	} `json:"filters"`
	OrderType []string `json:"OrderType"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"baseAsset\":"
		out.RawString(prefix)
		out.String(string(in.BaseAsset))
	}
	{
		const prefix string = ",\"quoteAsset\":"
		out.RawString(prefix)
		out.String(string(in.QuoteAsset))
	}
	{
		const prefix string = ",\"pricePrecision\":"
		out.RawString(prefix)
		out.Int(int(in.PricePrecision))
	}
	{
		const prefix string = ",\"quantityPrecision\":"
		out.RawString(prefix)
		out.Int(int(in.QuantityPrecision))
	}
	{
		const prefix string = ",\"filters\":"
		out.RawString(prefix)
		if in.Filters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Filters {
				if v36 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28Encode3(out, v37)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"OrderType\":"
		out.RawString(prefix)
		if in.OrderType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.OrderType {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonDc809a28Decode3(in *jlexer.Lexer, out *struct {
	FilterType string `json:"filterType"`
	MinPrice   string `json:"minPrice,omitempty"`
	MaxPrice   string `json:"maxPrice,omitempty"`
	TickSize   string `json:"tickSize,omitempty"`
	MinQty     string `json:"minQty,omitempty"`
	MaxQty     string `json:"maxQty,omitempty"`
	StepSize   string `json:"stepSize,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filterType":
			out.FilterType = string(in.String())
		case "minPrice":
			out.MinPrice = string(in.String())
		case "maxPrice":
			out.MaxPrice = string(in.String())
		case "tickSize":
			out.TickSize = string(in.String())
		case "minQty":
			out.MinQty = string(in.String())
		case "maxQty":
			out.MaxQty = string(in.String())
		case "stepSize":
			out.StepSize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28Encode3(out *jwriter.Writer, in struct {
	FilterType string `json:"filterType"`
	MinPrice   string `json:"minPrice,omitempty"`
	MaxPrice   string `json:"maxPrice,omitempty"`
	TickSize   string `json:"tickSize,omitempty"`
	MinQty     string `json:"minQty,omitempty"`
	MaxQty     string `json:"maxQty,omitempty"`
	StepSize   string `json:"stepSize,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filterType\":"
		out.RawString(prefix[1:])
		out.String(string(in.FilterType))
	}
	if in.MinPrice != "" {
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix)
		out.String(string(in.MinPrice))
	}
	if in.MaxPrice != "" {
		const prefix string = ",\"maxPrice\":"
		out.RawString(prefix)
		out.String(string(in.MaxPrice))
	}
	if in.TickSize != "" {
		const prefix string = ",\"tickSize\":"
		out.RawString(prefix)
		out.String(string(in.TickSize))
	}
	if in.MinQty != "" {
		const prefix string = ",\"minQty\":"
		out.RawString(prefix)
		out.String(string(in.MinQty))
	}
	if in.MaxQty != "" {
		const prefix string = ",\"maxQty\":"
		out.RawString(prefix)
		out.String(string(in.MaxQty))
	}
	if in.StepSize != "" {
		const prefix string = ",\"stepSize\":"
		out.RawString(prefix)
		out.String(string(in.StepSize))
	}
	out.RawByte('}')
}
func easyjsonDc809a28Decode1(in *jlexer.Lexer, out *struct {
	RateLimitType string `json:"rateLimitType"`
	Interval      string `json:"interval"`
	IntervalNum   int    `json:"intervalNum"`
	Limit         int    `json:"limit"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28Encode1(out *jwriter.Writer, in struct {
	RateLimitType string `json:"rateLimitType"`
	Interval      string `json:"interval"`
	IntervalNum   int    `json:"intervalNum"`
	Limit         int    `json:"limit"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance20(in *jlexer.Lexer, out *WsTradeResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "orderListId":
			out.OrderListId = int(in.Int())
		case "price":
			out.Price = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "quoteQty":
			out.QuoteQty = string(in.String())
		case "commision":
			out.Commission = string(in.String())
		case "commissionAsset":
			out.CommissionAsset = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "isBuyer":
			out.IsBuyer = bool(in.Bool())
		case "isMaker":
			out.IsMaker = bool(in.Bool())
		case "isBestMatch":
			out.IsBestMatch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance20(out *jwriter.Writer, in WsTradeResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"orderListId\":"
		out.RawString(prefix)
		out.Int(int(in.OrderListId))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"quoteQty\":"
		out.RawString(prefix)
		out.String(string(in.QuoteQty))
	}
	{
		const prefix string = ",\"commision\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"commissionAsset\":"
		out.RawString(prefix)
		out.String(string(in.CommissionAsset))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"isBuyer\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuyer))
	}
	{
		const prefix string = ",\"isMaker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMaker))
	}
	{
		const prefix string = ",\"isBestMatch\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBestMatch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTradeResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTradeResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTradeResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTradeResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance20(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance21(in *jlexer.Lexer, out *WsTradeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "Status":
			out.Status = int(in.Int())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]WsTradeResult, 0, 0)
					} else {
						out.Result = []WsTradeResult{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v40 WsTradeResult
					(v40).UnmarshalEasyJSON(in)
					out.Result = append(out.Result, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]WsRateLimitEntry, 0, 1)
					} else {
						out.RateLimits = []WsRateLimitEntry{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v41 WsRateLimitEntry
					(v41).UnmarshalEasyJSON(in)
					out.RateLimits = append(out.RateLimits, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance21(out *jwriter.Writer, in WsTradeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Result {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix)
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.RateLimits {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsTradeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsTradeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsTradeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsTradeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance21(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance22(in *jlexer.Lexer, out *WsRateLimitEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rateLimitType":
			out.RateLimitType = string(in.String())
		case "interval":
			out.Interval = string(in.String())
		case "intervalNum":
			out.IntervalNum = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance22(out *jwriter.Writer, in WsRateLimitEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rateLimitType\":"
		out.RawString(prefix[1:])
		out.String(string(in.RateLimitType))
	}
	{
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.String(string(in.Interval))
	}
	{
		const prefix string = ",\"intervalNum\":"
		out.RawString(prefix)
		out.Int(int(in.IntervalNum))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int(int(in.Limit))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsRateLimitEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsRateLimitEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsRateLimitEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsRateLimitEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance22(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance23(in *jlexer.Lexer, out *WsOrderResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "orderId":
			out.OrderID = int64(in.Int64())
		case "clientOrderId":
			out.ClientOrderID = string(in.String())
		case "transactTime":
			out.TransactTime = int64(in.Int64())
		case "price":
			out.Price = string(in.String())
		case "avgPrice":
			out.AvgPrice = string(in.String())
		case "origQty":
			out.OrigQty = string(in.String())
		case "executedQty":
			out.ExecutedQty = string(in.String())
		case "origQuoteOrderQty":
			out.OrigQuoteQty = string(in.String())
		case "cumQty":
			out.CumQty = string(in.String())
		case "cumQuote":
			out.CumQuote = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "reduceOnly":
			out.ReduceOnly = bool(in.Bool())
		case "closePosition":
			out.ClosePosition = bool(in.Bool())
		case "side":
			out.Side = string(in.String())
		case "positionSide":
			out.PositionSide = string(in.String())
		case "stopPrice":
			out.StopPrice = string(in.String())
		case "workingType":
			out.WorkingType = string(in.String())
		case "priceProtect":
			out.PriceProtect = bool(in.Bool())
		case "origType":
			out.OrigType = string(in.String())
		case "priceMatch":
			out.PriceMatch = string(in.String())
		case "selfTradePreventionMode":
			out.SelfTradePreventionMode = string(in.String())
		case "goodTillDate":
			out.GoodTillDate = int64(in.Int64())
		case "updateTime":
			out.UpdateTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance23(out *jwriter.Writer, in WsOrderResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderID))
	}
	{
		const prefix string = ",\"clientOrderId\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"transactTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.TransactTime))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"avgPrice\":"
		out.RawString(prefix)
		out.String(string(in.AvgPrice))
	}
	{
		const prefix string = ",\"origQty\":"
		out.RawString(prefix)
		out.String(string(in.OrigQty))
	}
	{
		const prefix string = ",\"executedQty\":"
		out.RawString(prefix)
		out.String(string(in.ExecutedQty))
	}
	{
		const prefix string = ",\"origQuoteOrderQty\":"
		out.RawString(prefix)
		out.String(string(in.OrigQuoteQty))
	}
	{
		const prefix string = ",\"cumQty\":"
		out.RawString(prefix)
		out.String(string(in.CumQty))
	}
	{
		const prefix string = ",\"cumQuote\":"
		out.RawString(prefix)
		out.String(string(in.CumQuote))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"closePosition\":"
		out.RawString(prefix)
		out.Bool(bool(in.ClosePosition))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"positionSide\":"
		out.RawString(prefix)
		out.String(string(in.PositionSide))
	}
	{
		const prefix string = ",\"stopPrice\":"
		out.RawString(prefix)
		out.String(string(in.StopPrice))
	}
	{
		const prefix string = ",\"workingType\":"
		out.RawString(prefix)
		out.String(string(in.WorkingType))
	}
	{
		const prefix string = ",\"priceProtect\":"
		out.RawString(prefix)
		out.Bool(bool(in.PriceProtect))
	}
	{
		const prefix string = ",\"origType\":"
		out.RawString(prefix)
		out.String(string(in.OrigType))
	}
	{
		const prefix string = ",\"priceMatch\":"
		out.RawString(prefix)
		out.String(string(in.PriceMatch))
	}
	{
		const prefix string = ",\"selfTradePreventionMode\":"
		out.RawString(prefix)
		out.String(string(in.SelfTradePreventionMode))
	}
	{
		const prefix string = ",\"goodTillDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.GoodTillDate))
	}
	{
		const prefix string = ",\"updateTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance23(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance24(in *jlexer.Lexer, out *WsOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		case "rateLimits":
			if in.IsNull() {
				in.Skip()
				out.RateLimits = nil
			} else {
				in.Delim('[')
				if out.RateLimits == nil {
					if !in.IsDelim(']') {
						out.RateLimits = make([]WsRateLimitEntry, 0, 1)
					} else {
						out.RateLimits = []WsRateLimitEntry{}
					}
				} else {
					out.RateLimits = (out.RateLimits)[:0]
				}
				for !in.IsDelim(']') {
					var v46 WsRateLimitEntry
					(v46).UnmarshalEasyJSON(in)
					out.RateLimits = append(out.RateLimits, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance24(out *jwriter.Writer, in WsOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rateLimits\":"
		out.RawString(prefix)
		if in.RateLimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.RateLimits {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance24(l, v)
}
func easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance25(in *jlexer.Lexer, out *WsOrderFill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "commission":
			out.Commission = string(in.String())
		case "commissionAsset":
			out.CommissionAsset = string(in.String())
		case "tradeId":
			out.TradeID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance25(out *jwriter.Writer, in WsOrderFill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.String(string(in.Commission))
	}
	{
		const prefix string = ",\"commissionAsset\":"
		out.RawString(prefix)
		out.String(string(in.CommissionAsset))
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.Int64(int64(in.TradeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderFill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderFill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComLjm2yaQuickexGoFuturesBinance25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderFill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderFill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComLjm2yaQuickexGoFuturesBinance25(l, v)
}
