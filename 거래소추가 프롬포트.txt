# 거래소 추가 구현 가이드 (Phemex 노하우 반영)

## 🎯 기본 요구사항

새 거래소를 추가할 때는 다음 사항들을 반드시 준수해야 합니다:

### 📁 프로젝트 구조 준수
- `core/interface.go`의 모든 함수를 **하나도 빠짐없이** 완전히 구현
- `client/[거래소명]/` 디렉토리 구조로 구성
- 기존 거래소 구현 패턴(OKX, KuCoin, Bybit 등) 참고

### 🔌 WebSocket 우선 + REST 대체 패턴
```
무조건 우선적으로 WebSocket으로 구현 → 지원되지 않을 경우에만 REST API로 대체
```
- 모든 거래 기능 포함하여 WebSocket 우선 시도
- 실패 시 REST API로 자동 fallback
- 각 거래소별 WebSocket 지원 현황 정확히 파악 필요

## 🔍 구현 전 필수 조사사항

### 1. API 문서 철저 분석
- **인증 방식**: HMAC-SHA256, API Key 형태 확인
- **엔드포인트 구조**: Public vs Private API 분리 확인
- **WebSocket 지원 범위**: 거래, 잔고 조회, 실시간 데이터 등
- **REST API 지원 범위**: WebSocket 미지원 기능들

### 2. 파라미터 형식 주의사항 ⚠️
**Phemex 사례**: 표준과 다른 독특한 파라미터 형식 발견
```
일반적인 형식: orderQty, quoteOrderQty
Phemex 형식: baseQtyEv, quoteQtyEv, qtyType
```
- 각 거래소마다 **독특한 파라미터 형식** 존재 가능
- 공식 문서 외에도 GitHub 이슈, 커뮤니티 검색 필요
- 실제 웹사이트에서 거래 테스트하여 API 형식과 비교

### 3. 수량/가격 스케일링 확인
- 대부분 거래소: 1e8 또는 1e4 스케일링 사용
- **상품별로 다른 스케일링** 가능성 확인
- baseTickSize, quoteTickSize, priceTickSize 등 정확한 값 파악

### 4. 심볼 명명 규칙 파악
- 웹사이트 표시: `DOGE-USDT`
- API 실제 심볼: `sDOGEUSDT` (Phemex 스팟의 경우)
- 선물과 스팟의 심볼 구분 방식 확인

## 🛠 단계별 구현 프로세스

### Phase 1: 기본 연결 및 인증
1. WebSocket 연결 및 인증 구현
2. REST API 인증 구현
3. 공개 API로 시장 데이터 조회 테스트

### Phase 2: 계정 정보
1. 잔고 조회 (스팟 + 선물 구분)
2. 포지션 조회 (선물의 경우)
3. 실시간 잔고 업데이트 구독

### Phase 3: 거래 기능
1. **반드시 소액으로 실제 거래 테스트** 🚨
2. 시장가 매수/매도
3. 지정가 매수/매도  
4. 주문 취소 및 전체 취소
5. 주문 상태 조회

### Phase 4: 시장 데이터
1. 실시간 가격 데이터 구독
2. 심볼 정보 조회
3. 시장 규칙 및 제한사항 파악

## 🧪 테스트 전략

### 실제 거래 테스트 필수
```
소액 잔고로 실제 매수/매도 사이클 테스트
→ 웹사이트 결과와 API 결과 비교
→ 불일치 시 파라미터 형식 재검토
```

### 디버깅 파일 체계적 관리
```
[거래소명]_basic_test.go          # 기본 연결 테스트
[거래소명]_order_debug.go         # 주문 파라미터 디버깅
[거래소명]_correct_format.go      # 최종 성공 버전
```

### 에러 코드 분석
- 각 거래소별 에러 코드 체계 파악
- 흔한 에러들: 최소 주문 금액, 파라미터 형식 오류, 권한 부족 등
- 에러 메시지에서 힌트 찾기 (예: "tick size: 1000")

## 🚨 주의사항

### API 제한사항
- WebSocket 연결 수 제한
- 초당 요청 횟수 제한  
- 동시 구독 가능한 심볼 수 제한
- IP 기반 제한 vs 계정 기반 제한

### 계정 권한 확인
- KYC 완료 여부
- API 키 권한 설정 (거래, 출금 등)
- VIP 계정 vs 일반 계정 차이점
- 테스트넷 vs 메인넷 구분

### 연결 안정성
- WebSocket 재연결 로직
- 핑퐁 또는 하트비트 구현
- 연결 수명 관리 (24시간 제한 등)

## 💡 Phemex 구현에서 얻은 핵심 교훈

### 1. 문서만 믿지 말고 실제 테스트
- 공식 문서와 실제 API 동작이 다를 수 있음
- 커뮤니티, GitHub 이슈, 웹 검색으로 추가 정보 수집

### 2. 파라미터 형식은 거래소마다 독특함
- 표준 형식 가정하지 말 것
- 실패 시 다양한 파라미터 조합 체계적으로 테스트

### 3. 웹사이트 거래와 API 거래 결과 비교
- 같은 조건으로 웹사이트에서 거래 성공 시 API 형식 문제
- 웹사이트 개발자 도구로 실제 전송 파라미터 확인

### 4. 점진적 디버깅 접근
- 공개 API → 인증 → 잔고 조회 → 주문 순서로 단계적 구현
- 각 단계에서 완전히 동작 확인 후 다음 단계 진행

### 5. 체계적 파일 관리
- 디버깅 과정에서 생성되는 테스트 파일들 버전별로 보관
- 최종 성공 버전은 별도 보관하여 참조 자료로 활용

## 📋 최종 체크리스트

- [ ] 모든 core/interface.go 함수 구현
- [ ] WebSocket 우선, REST 대체 패턴 적용
- [ ] 소액 실제 거래 테스트 완료
- [ ] 웹사이트 결과와 API 결과 일치 확인
- [ ] 에러 처리 및 재연결 로직 구현
- [ ] 코드 정리 및 디버깅 파일 정리
- [ ] 문서화 (README 업데이트 등)

---
**Remember**: 각 거래소는 독특한 특성이 있으므로, 유연한 접근과 철저한 테스트가 핵심입니다.